# Gitlab Pipeline with 3 stages:
# It first tests the Django application by executing the tests.py file under the mysite folder.
# Afterwards it uploads the Docker image to the Gitlab image repository with the commit tag.
# In the last stage it connects per ssh to a remote server and logs into the image repository, stops the
# a possible running instance of the Django application and starts the latest instance.
stages:
  - test
  - upload
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:LATEST
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

test:
  stage: test
  image: ubuntu:latest

  services: 
    - name: mongo:latest
    
  before_script:
    - apt-get update -qy
    - apt-get install -y python3 python3-pip wget mongodb
    - pip3 install -r reqs.txt
  script: 
    - cd mysite
    - python3 manage.py test


upload:
  stage: upload
  image: docker:latest
  services:
    - docker:dind

  before_script:
    - docker network create mynet

  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST --network mynet .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f mangalist || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d --network mynet --name mangalist $TAG_COMMIT"
  only:
    - master